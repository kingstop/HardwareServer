// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgs2s.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgs2s.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message {

namespace {

const ::google::protobuf::Descriptor* ServerVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgServerRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgServerRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDB2GTChangeGS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDB2GTChangeGS_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msgs2s_2eproto() {
  protobuf_AddDesc_msgs2s_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msgs2s.proto");
  GOOGLE_CHECK(file != NULL);
  ServerVersion_descriptor_ = file->message_type(0);
  static const int ServerVersion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, build_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, appsvn_),
  };
  ServerVersion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerVersion_descriptor_,
      ServerVersion::default_instance_,
      ServerVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerVersion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, _internal_metadata_),
      -1);
  MsgServerRegister_descriptor_ = file->message_type(1);
  static const int MsgServerRegister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, version_),
  };
  MsgServerRegister_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgServerRegister_descriptor_,
      MsgServerRegister::default_instance_,
      MsgServerRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgServerRegister),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, _internal_metadata_),
      -1);
  MsgDB2GTChangeGS_descriptor_ = file->message_type(2);
  static const int MsgDB2GTChangeGS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDB2GTChangeGS, gameserverid_),
  };
  MsgDB2GTChangeGS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgDB2GTChangeGS_descriptor_,
      MsgDB2GTChangeGS::default_instance_,
      MsgDB2GTChangeGS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDB2GTChangeGS, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgDB2GTChangeGS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDB2GTChangeGS, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msgs2s_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerVersion_descriptor_, &ServerVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgServerRegister_descriptor_, &MsgServerRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgDB2GTChangeGS_descriptor_, &MsgDB2GTChangeGS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msgs2s_2eproto() {
  delete ServerVersion::default_instance_;
  delete ServerVersion_reflection_;
  delete MsgServerRegister::default_instance_;
  delete MsgServerRegister_reflection_;
  delete MsgDB2GTChangeGS::default_instance_;
  delete MsgDB2GTChangeGS_reflection_;
}

void protobuf_AddDesc_msgs2s_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014msgs2s.proto\022\007message\"L\n\rServerVersion"
    "\022\r\n\005Major\030\001 \002(\r\022\r\n\005Minor\030\002 \002(\r\022\r\n\005Build\030"
    "\003 \002(\r\022\016\n\006AppSvn\030\004 \002(\r\"N\n\021MsgServerRegist"
    "er\022\020\n\010ServerId\030\001 \002(\r\022\'\n\007Version\030\002 \002(\0132\026."
    "message.ServerVersion\"(\n\020MsgDB2GTChangeG"
    "S\022\024\n\014GameServerID\030\001 \002(\r", 223);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msgs2s.proto", &protobuf_RegisterTypes);
  ServerVersion::default_instance_ = new ServerVersion();
  MsgServerRegister::default_instance_ = new MsgServerRegister();
  MsgDB2GTChangeGS::default_instance_ = new MsgDB2GTChangeGS();
  ServerVersion::default_instance_->InitAsDefaultInstance();
  MsgServerRegister::default_instance_->InitAsDefaultInstance();
  MsgDB2GTChangeGS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgs2s_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgs2s_2eproto {
  StaticDescriptorInitializer_msgs2s_2eproto() {
    protobuf_AddDesc_msgs2s_2eproto();
  }
} static_descriptor_initializer_msgs2s_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ServerVersion::kMajorFieldNumber;
const int ServerVersion::kMinorFieldNumber;
const int ServerVersion::kBuildFieldNumber;
const int ServerVersion::kAppSvnFieldNumber;
#endif  // !_MSC_VER

ServerVersion::ServerVersion()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.ServerVersion)
}

void ServerVersion::InitAsDefaultInstance() {
}

ServerVersion::ServerVersion(const ServerVersion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.ServerVersion)
}

void ServerVersion::SharedCtor() {
  _cached_size_ = 0;
  major_ = 0u;
  minor_ = 0u;
  build_ = 0u;
  appsvn_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerVersion::~ServerVersion() {
  // @@protoc_insertion_point(destructor:message.ServerVersion)
  SharedDtor();
}

void ServerVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerVersion_descriptor_;
}

const ServerVersion& ServerVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgs2s_2eproto();
  return *default_instance_;
}

ServerVersion* ServerVersion::default_instance_ = NULL;

ServerVersion* ServerVersion::New(::google::protobuf::Arena* arena) const {
  ServerVersion* n = new ServerVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerVersion::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerVersion*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(major_, appsvn_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.ServerVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Major = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Minor;
        break;
      }

      // required uint32 Minor = 2;
      case 2: {
        if (tag == 16) {
         parse_Minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Build;
        break;
      }

      // required uint32 Build = 3;
      case 3: {
        if (tag == 24) {
         parse_Build:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &build_)));
          set_has_build();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AppSvn;
        break;
      }

      // required uint32 AppSvn = 4;
      case 4: {
        if (tag == 32) {
         parse_AppSvn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appsvn_)));
          set_has_appsvn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.ServerVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.ServerVersion)
  return false;
#undef DO_
}

void ServerVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.ServerVersion)
  // required uint32 Major = 1;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major(), output);
  }

  // required uint32 Minor = 2;
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor(), output);
  }

  // required uint32 Build = 3;
  if (has_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->build(), output);
  }

  // required uint32 AppSvn = 4;
  if (has_appsvn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->appsvn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.ServerVersion)
}

::google::protobuf::uint8* ServerVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.ServerVersion)
  // required uint32 Major = 1;
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major(), target);
  }

  // required uint32 Minor = 2;
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor(), target);
  }

  // required uint32 Build = 3;
  if (has_build()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->build(), target);
  }

  // required uint32 AppSvn = 4;
  if (has_appsvn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->appsvn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.ServerVersion)
  return target;
}

int ServerVersion::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_major()) {
    // required uint32 Major = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->major());
  }

  if (has_minor()) {
    // required uint32 Minor = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minor());
  }

  if (has_build()) {
    // required uint32 Build = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->build());
  }

  if (has_appsvn()) {
    // required uint32 AppSvn = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appsvn());
  }

  return total_size;
}
int ServerVersion::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 Major = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->major());

    // required uint32 Minor = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minor());

    // required uint32 Build = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->build());

    // required uint32 AppSvn = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appsvn());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerVersion::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerVersion::MergeFrom(const ServerVersion& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_build()) {
      set_build(from.build());
    }
    if (from.has_appsvn()) {
      set_appsvn(from.appsvn());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerVersion::CopyFrom(const ServerVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerVersion::Swap(ServerVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerVersion::InternalSwap(ServerVersion* other) {
  std::swap(major_, other->major_);
  std::swap(minor_, other->minor_);
  std::swap(build_, other->build_);
  std::swap(appsvn_, other->appsvn_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerVersion_descriptor_;
  metadata.reflection = ServerVersion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerVersion

// required uint32 Major = 1;
 bool ServerVersion::has_major() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void ServerVersion::set_has_major() {
  _has_bits_[0] |= 0x00000001u;
}
 void ServerVersion::clear_has_major() {
  _has_bits_[0] &= ~0x00000001u;
}
 void ServerVersion::clear_major() {
  major_ = 0u;
  clear_has_major();
}
 ::google::protobuf::uint32 ServerVersion::major() const {
  // @@protoc_insertion_point(field_get:message.ServerVersion.Major)
  return major_;
}
 void ServerVersion::set_major(::google::protobuf::uint32 value) {
  set_has_major();
  major_ = value;
  // @@protoc_insertion_point(field_set:message.ServerVersion.Major)
}

// required uint32 Minor = 2;
 bool ServerVersion::has_minor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void ServerVersion::set_has_minor() {
  _has_bits_[0] |= 0x00000002u;
}
 void ServerVersion::clear_has_minor() {
  _has_bits_[0] &= ~0x00000002u;
}
 void ServerVersion::clear_minor() {
  minor_ = 0u;
  clear_has_minor();
}
 ::google::protobuf::uint32 ServerVersion::minor() const {
  // @@protoc_insertion_point(field_get:message.ServerVersion.Minor)
  return minor_;
}
 void ServerVersion::set_minor(::google::protobuf::uint32 value) {
  set_has_minor();
  minor_ = value;
  // @@protoc_insertion_point(field_set:message.ServerVersion.Minor)
}

// required uint32 Build = 3;
 bool ServerVersion::has_build() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void ServerVersion::set_has_build() {
  _has_bits_[0] |= 0x00000004u;
}
 void ServerVersion::clear_has_build() {
  _has_bits_[0] &= ~0x00000004u;
}
 void ServerVersion::clear_build() {
  build_ = 0u;
  clear_has_build();
}
 ::google::protobuf::uint32 ServerVersion::build() const {
  // @@protoc_insertion_point(field_get:message.ServerVersion.Build)
  return build_;
}
 void ServerVersion::set_build(::google::protobuf::uint32 value) {
  set_has_build();
  build_ = value;
  // @@protoc_insertion_point(field_set:message.ServerVersion.Build)
}

// required uint32 AppSvn = 4;
 bool ServerVersion::has_appsvn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void ServerVersion::set_has_appsvn() {
  _has_bits_[0] |= 0x00000008u;
}
 void ServerVersion::clear_has_appsvn() {
  _has_bits_[0] &= ~0x00000008u;
}
 void ServerVersion::clear_appsvn() {
  appsvn_ = 0u;
  clear_has_appsvn();
}
 ::google::protobuf::uint32 ServerVersion::appsvn() const {
  // @@protoc_insertion_point(field_get:message.ServerVersion.AppSvn)
  return appsvn_;
}
 void ServerVersion::set_appsvn(::google::protobuf::uint32 value) {
  set_has_appsvn();
  appsvn_ = value;
  // @@protoc_insertion_point(field_set:message.ServerVersion.AppSvn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgServerRegister::kServerIdFieldNumber;
const int MsgServerRegister::kVersionFieldNumber;
#endif  // !_MSC_VER

MsgServerRegister::MsgServerRegister()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgServerRegister)
}

void MsgServerRegister::InitAsDefaultInstance() {
  version_ = const_cast< ::message::ServerVersion*>(&::message::ServerVersion::default_instance());
}

MsgServerRegister::MsgServerRegister(const MsgServerRegister& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgServerRegister)
}

void MsgServerRegister::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0u;
  version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgServerRegister::~MsgServerRegister() {
  // @@protoc_insertion_point(destructor:message.MsgServerRegister)
  SharedDtor();
}

void MsgServerRegister::SharedDtor() {
  if (this != default_instance_) {
    delete version_;
  }
}

void MsgServerRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgServerRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgServerRegister_descriptor_;
}

const MsgServerRegister& MsgServerRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgs2s_2eproto();
  return *default_instance_;
}

MsgServerRegister* MsgServerRegister::default_instance_ = NULL;

MsgServerRegister* MsgServerRegister::New(::google::protobuf::Arena* arena) const {
  MsgServerRegister* n = new MsgServerRegister;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgServerRegister::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    serverid_ = 0u;
    if (has_version()) {
      if (version_ != NULL) version_->::message::ServerVersion::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgServerRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgServerRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ServerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Version;
        break;
      }

      // required .message.ServerVersion Version = 2;
      case 2: {
        if (tag == 18) {
         parse_Version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgServerRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgServerRegister)
  return false;
#undef DO_
}

void MsgServerRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgServerRegister)
  // required uint32 ServerId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverid(), output);
  }

  // required .message.ServerVersion Version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->version_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgServerRegister)
}

::google::protobuf::uint8* MsgServerRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgServerRegister)
  // required uint32 ServerId = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverid(), target);
  }

  // required .message.ServerVersion Version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->version_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgServerRegister)
  return target;
}

int MsgServerRegister::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_serverid()) {
    // required uint32 ServerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverid());
  }

  if (has_version()) {
    // required .message.ServerVersion Version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->version_);
  }

  return total_size;
}
int MsgServerRegister::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 ServerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverid());

    // required .message.ServerVersion Version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->version_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgServerRegister::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgServerRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgServerRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgServerRegister::MergeFrom(const MsgServerRegister& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_version()) {
      mutable_version()->::message::ServerVersion::MergeFrom(from.version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgServerRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgServerRegister::CopyFrom(const MsgServerRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgServerRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_version()) {
    if (!this->version_->IsInitialized()) return false;
  }
  return true;
}

void MsgServerRegister::Swap(MsgServerRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgServerRegister::InternalSwap(MsgServerRegister* other) {
  std::swap(serverid_, other->serverid_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgServerRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgServerRegister_descriptor_;
  metadata.reflection = MsgServerRegister_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgServerRegister

// required uint32 ServerId = 1;
 bool MsgServerRegister::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgServerRegister::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgServerRegister::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgServerRegister::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
 ::google::protobuf::uint32 MsgServerRegister::serverid() const {
  // @@protoc_insertion_point(field_get:message.MsgServerRegister.ServerId)
  return serverid_;
}
 void MsgServerRegister::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:message.MsgServerRegister.ServerId)
}

// required .message.ServerVersion Version = 2;
 bool MsgServerRegister::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MsgServerRegister::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
 void MsgServerRegister::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MsgServerRegister::clear_version() {
  if (version_ != NULL) version_->::message::ServerVersion::Clear();
  clear_has_version();
}
 const ::message::ServerVersion& MsgServerRegister::version() const {
  // @@protoc_insertion_point(field_get:message.MsgServerRegister.Version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
 ::message::ServerVersion* MsgServerRegister::mutable_version() {
  set_has_version();
  if (version_ == NULL) {
    version_ = new ::message::ServerVersion;
  }
  // @@protoc_insertion_point(field_mutable:message.MsgServerRegister.Version)
  return version_;
}
 ::message::ServerVersion* MsgServerRegister::release_version() {
  clear_has_version();
  ::message::ServerVersion* temp = version_;
  version_ = NULL;
  return temp;
}
 void MsgServerRegister::set_allocated_version(::message::ServerVersion* version) {
  delete version_;
  version_ = version;
  if (version) {
    set_has_version();
  } else {
    clear_has_version();
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgServerRegister.Version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgDB2GTChangeGS::kGameServerIDFieldNumber;
#endif  // !_MSC_VER

MsgDB2GTChangeGS::MsgDB2GTChangeGS()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgDB2GTChangeGS)
}

void MsgDB2GTChangeGS::InitAsDefaultInstance() {
}

MsgDB2GTChangeGS::MsgDB2GTChangeGS(const MsgDB2GTChangeGS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgDB2GTChangeGS)
}

void MsgDB2GTChangeGS::SharedCtor() {
  _cached_size_ = 0;
  gameserverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDB2GTChangeGS::~MsgDB2GTChangeGS() {
  // @@protoc_insertion_point(destructor:message.MsgDB2GTChangeGS)
  SharedDtor();
}

void MsgDB2GTChangeGS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDB2GTChangeGS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDB2GTChangeGS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDB2GTChangeGS_descriptor_;
}

const MsgDB2GTChangeGS& MsgDB2GTChangeGS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgs2s_2eproto();
  return *default_instance_;
}

MsgDB2GTChangeGS* MsgDB2GTChangeGS::default_instance_ = NULL;

MsgDB2GTChangeGS* MsgDB2GTChangeGS::New(::google::protobuf::Arena* arena) const {
  MsgDB2GTChangeGS* n = new MsgDB2GTChangeGS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgDB2GTChangeGS::Clear() {
  gameserverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgDB2GTChangeGS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgDB2GTChangeGS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 GameServerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameserverid_)));
          set_has_gameserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgDB2GTChangeGS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgDB2GTChangeGS)
  return false;
#undef DO_
}

void MsgDB2GTChangeGS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgDB2GTChangeGS)
  // required uint32 GameServerID = 1;
  if (has_gameserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameserverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgDB2GTChangeGS)
}

::google::protobuf::uint8* MsgDB2GTChangeGS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgDB2GTChangeGS)
  // required uint32 GameServerID = 1;
  if (has_gameserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameserverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgDB2GTChangeGS)
  return target;
}

int MsgDB2GTChangeGS::ByteSize() const {
  int total_size = 0;

  // required uint32 GameServerID = 1;
  if (has_gameserverid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameserverid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDB2GTChangeGS::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgDB2GTChangeGS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDB2GTChangeGS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDB2GTChangeGS::MergeFrom(const MsgDB2GTChangeGS& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameserverid()) {
      set_gameserverid(from.gameserverid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgDB2GTChangeGS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDB2GTChangeGS::CopyFrom(const MsgDB2GTChangeGS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDB2GTChangeGS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgDB2GTChangeGS::Swap(MsgDB2GTChangeGS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgDB2GTChangeGS::InternalSwap(MsgDB2GTChangeGS* other) {
  std::swap(gameserverid_, other->gameserverid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgDB2GTChangeGS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDB2GTChangeGS_descriptor_;
  metadata.reflection = MsgDB2GTChangeGS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgDB2GTChangeGS

// required uint32 GameServerID = 1;
 bool MsgDB2GTChangeGS::has_gameserverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgDB2GTChangeGS::set_has_gameserverid() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgDB2GTChangeGS::clear_has_gameserverid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgDB2GTChangeGS::clear_gameserverid() {
  gameserverid_ = 0u;
  clear_has_gameserverid();
}
 ::google::protobuf::uint32 MsgDB2GTChangeGS::gameserverid() const {
  // @@protoc_insertion_point(field_get:message.MsgDB2GTChangeGS.GameServerID)
  return gameserverid_;
}
 void MsgDB2GTChangeGS::set_gameserverid(::google::protobuf::uint32 value) {
  set_has_gameserverid();
  gameserverid_ = value;
  // @@protoc_insertion_point(field_set:message.MsgDB2GTChangeGS.GameServerID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
