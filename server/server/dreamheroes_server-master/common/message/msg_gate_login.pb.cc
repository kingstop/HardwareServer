// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_gate_login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_gate_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message {

namespace {

const ::google::protobuf::Descriptor* GTLGData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTLGData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLN2GTUserLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLN2GTUserLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLN2GTKickUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLN2GTKickUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGT2LNOnlines_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGT2LNOnlines_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGT2LNPrepar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGT2LNPrepar_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGTRegisterLG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGTRegisterLG_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fgate_5flogin_2eproto() {
  protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_gate_login.proto");
  GOOGLE_CHECK(file != NULL);
  GTLGData_descriptor_ = file->message_type(0);
  static const int GTLGData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTLGData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTLGData, transid_),
  };
  GTLGData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GTLGData_descriptor_,
      GTLGData::default_instance_,
      GTLGData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTLGData, _has_bits_[0]),
      -1,
      -1,
      sizeof(GTLGData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTLGData, _internal_metadata_),
      -1);
  MsgLN2GTUserLogin_descriptor_ = file->message_type(1);
  static const int MsgLN2GTUserLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLN2GTUserLogin, data_),
  };
  MsgLN2GTUserLogin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgLN2GTUserLogin_descriptor_,
      MsgLN2GTUserLogin::default_instance_,
      MsgLN2GTUserLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLN2GTUserLogin, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgLN2GTUserLogin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLN2GTUserLogin, _internal_metadata_),
      -1);
  MsgLN2GTKickUser_descriptor_ = file->message_type(2);
  static const int MsgLN2GTKickUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLN2GTKickUser, data_),
  };
  MsgLN2GTKickUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgLN2GTKickUser_descriptor_,
      MsgLN2GTKickUser::default_instance_,
      MsgLN2GTKickUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLN2GTKickUser, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgLN2GTKickUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLN2GTKickUser, _internal_metadata_),
      -1);
  MsgGT2LNOnlines_descriptor_ = file->message_type(3);
  static const int MsgGT2LNOnlines_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGT2LNOnlines, onlines_),
  };
  MsgGT2LNOnlines_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgGT2LNOnlines_descriptor_,
      MsgGT2LNOnlines::default_instance_,
      MsgGT2LNOnlines_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGT2LNOnlines, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgGT2LNOnlines),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGT2LNOnlines, _internal_metadata_),
      -1);
  MsgGT2LNPrepar_descriptor_ = file->message_type(4);
  static const int MsgGT2LNPrepar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGT2LNPrepar, account_),
  };
  MsgGT2LNPrepar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgGT2LNPrepar_descriptor_,
      MsgGT2LNPrepar::default_instance_,
      MsgGT2LNPrepar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGT2LNPrepar, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgGT2LNPrepar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGT2LNPrepar, _internal_metadata_),
      -1);
  MsgGTRegisterLG_descriptor_ = file->message_type(5);
  static const int MsgGTRegisterLG_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGTRegisterLG, gateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGTRegisterLG, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGTRegisterLG, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGTRegisterLG, accounts_),
  };
  MsgGTRegisterLG_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgGTRegisterLG_descriptor_,
      MsgGTRegisterLG::default_instance_,
      MsgGTRegisterLG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGTRegisterLG, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgGTRegisterLG),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGTRegisterLG, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fgate_5flogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GTLGData_descriptor_, &GTLGData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgLN2GTUserLogin_descriptor_, &MsgLN2GTUserLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgLN2GTKickUser_descriptor_, &MsgLN2GTKickUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgGT2LNOnlines_descriptor_, &MsgGT2LNOnlines::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgGT2LNPrepar_descriptor_, &MsgGT2LNPrepar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgGTRegisterLG_descriptor_, &MsgGTRegisterLG::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fgate_5flogin_2eproto() {
  delete GTLGData::default_instance_;
  delete GTLGData_reflection_;
  delete MsgLN2GTUserLogin::default_instance_;
  delete MsgLN2GTUserLogin_reflection_;
  delete MsgLN2GTKickUser::default_instance_;
  delete MsgLN2GTKickUser_reflection_;
  delete MsgGT2LNOnlines::default_instance_;
  delete MsgGT2LNOnlines_reflection_;
  delete MsgGT2LNPrepar::default_instance_;
  delete MsgGT2LNPrepar_reflection_;
  delete MsgGTRegisterLG::default_instance_;
  delete MsgGTRegisterLG_reflection_;
}

void protobuf_AddDesc_msg_5fgate_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::message::protobuf_AddDesc_msgs2s_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024msg_gate_login.proto\022\007message\032\014msgs2s."
    "proto\",\n\010GTLGData\022\017\n\007account\030\001 \002(\004\022\017\n\007tr"
    "ansid\030\002 \002(\r\"4\n\021MsgLN2GTUserLogin\022\037\n\004data"
    "\030\001 \002(\0132\021.message.GTLGData\"3\n\020MsgLN2GTKic"
    "kUser\022\037\n\004data\030\001 \002(\0132\021.message.GTLGData\"\""
    "\n\017MsgGT2LNOnlines\022\017\n\007onlines\030\001 \002(\r\"!\n\016Ms"
    "gGT2LNPrepar\022\017\n\007account\030\001 \002(\004\"~\n\017MsgGTRe"
    "gisterLG\022,\n\010GateInfo\030\001 \002(\0132\032.message.Msg"
    "ServerRegister\022\n\n\002ip\030\002 \002(\t\022\014\n\004port\030\003 \002(\r"
    "\022#\n\010Accounts\030\004 \003(\0132\021.message.GTLGData", 397);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_gate_login.proto", &protobuf_RegisterTypes);
  GTLGData::default_instance_ = new GTLGData();
  MsgLN2GTUserLogin::default_instance_ = new MsgLN2GTUserLogin();
  MsgLN2GTKickUser::default_instance_ = new MsgLN2GTKickUser();
  MsgGT2LNOnlines::default_instance_ = new MsgGT2LNOnlines();
  MsgGT2LNPrepar::default_instance_ = new MsgGT2LNPrepar();
  MsgGTRegisterLG::default_instance_ = new MsgGTRegisterLG();
  GTLGData::default_instance_->InitAsDefaultInstance();
  MsgLN2GTUserLogin::default_instance_->InitAsDefaultInstance();
  MsgLN2GTKickUser::default_instance_->InitAsDefaultInstance();
  MsgGT2LNOnlines::default_instance_->InitAsDefaultInstance();
  MsgGT2LNPrepar::default_instance_->InitAsDefaultInstance();
  MsgGTRegisterLG::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fgate_5flogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fgate_5flogin_2eproto {
  StaticDescriptorInitializer_msg_5fgate_5flogin_2eproto() {
    protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  }
} static_descriptor_initializer_msg_5fgate_5flogin_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int GTLGData::kAccountFieldNumber;
const int GTLGData::kTransidFieldNumber;
#endif  // !_MSC_VER

GTLGData::GTLGData()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.GTLGData)
}

void GTLGData::InitAsDefaultInstance() {
}

GTLGData::GTLGData(const GTLGData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.GTLGData)
}

void GTLGData::SharedCtor() {
  _cached_size_ = 0;
  account_ = GOOGLE_ULONGLONG(0);
  transid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTLGData::~GTLGData() {
  // @@protoc_insertion_point(destructor:message.GTLGData)
  SharedDtor();
}

void GTLGData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTLGData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTLGData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTLGData_descriptor_;
}

const GTLGData& GTLGData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  return *default_instance_;
}

GTLGData* GTLGData::default_instance_ = NULL;

GTLGData* GTLGData::New(::google::protobuf::Arena* arena) const {
  GTLGData* n = new GTLGData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GTLGData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GTLGData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(account_, transid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GTLGData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.GTLGData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 account = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_)));
          set_has_account();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transid;
        break;
      }

      // required uint32 transid = 2;
      case 2: {
        if (tag == 16) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.GTLGData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.GTLGData)
  return false;
#undef DO_
}

void GTLGData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.GTLGData)
  // required uint64 account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account(), output);
  }

  // required uint32 transid = 2;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->transid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.GTLGData)
}

::google::protobuf::uint8* GTLGData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.GTLGData)
  // required uint64 account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account(), target);
  }

  // required uint32 transid = 2;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->transid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.GTLGData)
  return target;
}

int GTLGData::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_account()) {
    // required uint64 account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->account());
  }

  if (has_transid()) {
    // required uint32 transid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->transid());
  }

  return total_size;
}
int GTLGData::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->account());

    // required uint32 transid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->transid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTLGData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GTLGData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTLGData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTLGData::MergeFrom(const GTLGData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GTLGData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTLGData::CopyFrom(const GTLGData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTLGData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTLGData::Swap(GTLGData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GTLGData::InternalSwap(GTLGData* other) {
  std::swap(account_, other->account_);
  std::swap(transid_, other->transid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GTLGData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTLGData_descriptor_;
  metadata.reflection = GTLGData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GTLGData

// required uint64 account = 1;
 bool GTLGData::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void GTLGData::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
 void GTLGData::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
 void GTLGData::clear_account() {
  account_ = GOOGLE_ULONGLONG(0);
  clear_has_account();
}
 ::google::protobuf::uint64 GTLGData::account() const {
  // @@protoc_insertion_point(field_get:message.GTLGData.account)
  return account_;
}
 void GTLGData::set_account(::google::protobuf::uint64 value) {
  set_has_account();
  account_ = value;
  // @@protoc_insertion_point(field_set:message.GTLGData.account)
}

// required uint32 transid = 2;
 bool GTLGData::has_transid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void GTLGData::set_has_transid() {
  _has_bits_[0] |= 0x00000002u;
}
 void GTLGData::clear_has_transid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void GTLGData::clear_transid() {
  transid_ = 0u;
  clear_has_transid();
}
 ::google::protobuf::uint32 GTLGData::transid() const {
  // @@protoc_insertion_point(field_get:message.GTLGData.transid)
  return transid_;
}
 void GTLGData::set_transid(::google::protobuf::uint32 value) {
  set_has_transid();
  transid_ = value;
  // @@protoc_insertion_point(field_set:message.GTLGData.transid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgLN2GTUserLogin::kDataFieldNumber;
#endif  // !_MSC_VER

MsgLN2GTUserLogin::MsgLN2GTUserLogin()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgLN2GTUserLogin)
}

void MsgLN2GTUserLogin::InitAsDefaultInstance() {
  data_ = const_cast< ::message::GTLGData*>(&::message::GTLGData::default_instance());
}

MsgLN2GTUserLogin::MsgLN2GTUserLogin(const MsgLN2GTUserLogin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgLN2GTUserLogin)
}

void MsgLN2GTUserLogin::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLN2GTUserLogin::~MsgLN2GTUserLogin() {
  // @@protoc_insertion_point(destructor:message.MsgLN2GTUserLogin)
  SharedDtor();
}

void MsgLN2GTUserLogin::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgLN2GTUserLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLN2GTUserLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLN2GTUserLogin_descriptor_;
}

const MsgLN2GTUserLogin& MsgLN2GTUserLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  return *default_instance_;
}

MsgLN2GTUserLogin* MsgLN2GTUserLogin::default_instance_ = NULL;

MsgLN2GTUserLogin* MsgLN2GTUserLogin::New(::google::protobuf::Arena* arena) const {
  MsgLN2GTUserLogin* n = new MsgLN2GTUserLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgLN2GTUserLogin::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::message::GTLGData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgLN2GTUserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgLN2GTUserLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.GTLGData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgLN2GTUserLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgLN2GTUserLogin)
  return false;
#undef DO_
}

void MsgLN2GTUserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgLN2GTUserLogin)
  // required .message.GTLGData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgLN2GTUserLogin)
}

::google::protobuf::uint8* MsgLN2GTUserLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgLN2GTUserLogin)
  // required .message.GTLGData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->data_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgLN2GTUserLogin)
  return target;
}

int MsgLN2GTUserLogin::ByteSize() const {
  int total_size = 0;

  // required .message.GTLGData data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLN2GTUserLogin::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgLN2GTUserLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLN2GTUserLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLN2GTUserLogin::MergeFrom(const MsgLN2GTUserLogin& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::message::GTLGData::MergeFrom(from.data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgLN2GTUserLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLN2GTUserLogin::CopyFrom(const MsgLN2GTUserLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLN2GTUserLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void MsgLN2GTUserLogin::Swap(MsgLN2GTUserLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgLN2GTUserLogin::InternalSwap(MsgLN2GTUserLogin* other) {
  std::swap(data_, other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgLN2GTUserLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLN2GTUserLogin_descriptor_;
  metadata.reflection = MsgLN2GTUserLogin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgLN2GTUserLogin

// required .message.GTLGData data = 1;
 bool MsgLN2GTUserLogin::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgLN2GTUserLogin::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgLN2GTUserLogin::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgLN2GTUserLogin::clear_data() {
  if (data_ != NULL) data_->::message::GTLGData::Clear();
  clear_has_data();
}
 const ::message::GTLGData& MsgLN2GTUserLogin::data() const {
  // @@protoc_insertion_point(field_get:message.MsgLN2GTUserLogin.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
 ::message::GTLGData* MsgLN2GTUserLogin::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::message::GTLGData;
  }
  // @@protoc_insertion_point(field_mutable:message.MsgLN2GTUserLogin.data)
  return data_;
}
 ::message::GTLGData* MsgLN2GTUserLogin::release_data() {
  clear_has_data();
  ::message::GTLGData* temp = data_;
  data_ = NULL;
  return temp;
}
 void MsgLN2GTUserLogin::set_allocated_data(::message::GTLGData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgLN2GTUserLogin.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgLN2GTKickUser::kDataFieldNumber;
#endif  // !_MSC_VER

MsgLN2GTKickUser::MsgLN2GTKickUser()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgLN2GTKickUser)
}

void MsgLN2GTKickUser::InitAsDefaultInstance() {
  data_ = const_cast< ::message::GTLGData*>(&::message::GTLGData::default_instance());
}

MsgLN2GTKickUser::MsgLN2GTKickUser(const MsgLN2GTKickUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgLN2GTKickUser)
}

void MsgLN2GTKickUser::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLN2GTKickUser::~MsgLN2GTKickUser() {
  // @@protoc_insertion_point(destructor:message.MsgLN2GTKickUser)
  SharedDtor();
}

void MsgLN2GTKickUser::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgLN2GTKickUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLN2GTKickUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLN2GTKickUser_descriptor_;
}

const MsgLN2GTKickUser& MsgLN2GTKickUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  return *default_instance_;
}

MsgLN2GTKickUser* MsgLN2GTKickUser::default_instance_ = NULL;

MsgLN2GTKickUser* MsgLN2GTKickUser::New(::google::protobuf::Arena* arena) const {
  MsgLN2GTKickUser* n = new MsgLN2GTKickUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgLN2GTKickUser::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::message::GTLGData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgLN2GTKickUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgLN2GTKickUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.GTLGData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgLN2GTKickUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgLN2GTKickUser)
  return false;
#undef DO_
}

void MsgLN2GTKickUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgLN2GTKickUser)
  // required .message.GTLGData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgLN2GTKickUser)
}

::google::protobuf::uint8* MsgLN2GTKickUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgLN2GTKickUser)
  // required .message.GTLGData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->data_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgLN2GTKickUser)
  return target;
}

int MsgLN2GTKickUser::ByteSize() const {
  int total_size = 0;

  // required .message.GTLGData data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLN2GTKickUser::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgLN2GTKickUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLN2GTKickUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLN2GTKickUser::MergeFrom(const MsgLN2GTKickUser& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::message::GTLGData::MergeFrom(from.data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgLN2GTKickUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLN2GTKickUser::CopyFrom(const MsgLN2GTKickUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLN2GTKickUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void MsgLN2GTKickUser::Swap(MsgLN2GTKickUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgLN2GTKickUser::InternalSwap(MsgLN2GTKickUser* other) {
  std::swap(data_, other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgLN2GTKickUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLN2GTKickUser_descriptor_;
  metadata.reflection = MsgLN2GTKickUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgLN2GTKickUser

// required .message.GTLGData data = 1;
 bool MsgLN2GTKickUser::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgLN2GTKickUser::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgLN2GTKickUser::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgLN2GTKickUser::clear_data() {
  if (data_ != NULL) data_->::message::GTLGData::Clear();
  clear_has_data();
}
 const ::message::GTLGData& MsgLN2GTKickUser::data() const {
  // @@protoc_insertion_point(field_get:message.MsgLN2GTKickUser.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
 ::message::GTLGData* MsgLN2GTKickUser::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::message::GTLGData;
  }
  // @@protoc_insertion_point(field_mutable:message.MsgLN2GTKickUser.data)
  return data_;
}
 ::message::GTLGData* MsgLN2GTKickUser::release_data() {
  clear_has_data();
  ::message::GTLGData* temp = data_;
  data_ = NULL;
  return temp;
}
 void MsgLN2GTKickUser::set_allocated_data(::message::GTLGData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgLN2GTKickUser.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgGT2LNOnlines::kOnlinesFieldNumber;
#endif  // !_MSC_VER

MsgGT2LNOnlines::MsgGT2LNOnlines()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgGT2LNOnlines)
}

void MsgGT2LNOnlines::InitAsDefaultInstance() {
}

MsgGT2LNOnlines::MsgGT2LNOnlines(const MsgGT2LNOnlines& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgGT2LNOnlines)
}

void MsgGT2LNOnlines::SharedCtor() {
  _cached_size_ = 0;
  onlines_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGT2LNOnlines::~MsgGT2LNOnlines() {
  // @@protoc_insertion_point(destructor:message.MsgGT2LNOnlines)
  SharedDtor();
}

void MsgGT2LNOnlines::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGT2LNOnlines::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGT2LNOnlines::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGT2LNOnlines_descriptor_;
}

const MsgGT2LNOnlines& MsgGT2LNOnlines::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  return *default_instance_;
}

MsgGT2LNOnlines* MsgGT2LNOnlines::default_instance_ = NULL;

MsgGT2LNOnlines* MsgGT2LNOnlines::New(::google::protobuf::Arena* arena) const {
  MsgGT2LNOnlines* n = new MsgGT2LNOnlines;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgGT2LNOnlines::Clear() {
  onlines_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgGT2LNOnlines::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgGT2LNOnlines)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 onlines = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlines_)));
          set_has_onlines();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgGT2LNOnlines)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgGT2LNOnlines)
  return false;
#undef DO_
}

void MsgGT2LNOnlines::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgGT2LNOnlines)
  // required uint32 onlines = 1;
  if (has_onlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->onlines(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgGT2LNOnlines)
}

::google::protobuf::uint8* MsgGT2LNOnlines::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgGT2LNOnlines)
  // required uint32 onlines = 1;
  if (has_onlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->onlines(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgGT2LNOnlines)
  return target;
}

int MsgGT2LNOnlines::ByteSize() const {
  int total_size = 0;

  // required uint32 onlines = 1;
  if (has_onlines()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->onlines());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGT2LNOnlines::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgGT2LNOnlines* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGT2LNOnlines*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGT2LNOnlines::MergeFrom(const MsgGT2LNOnlines& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onlines()) {
      set_onlines(from.onlines());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgGT2LNOnlines::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGT2LNOnlines::CopyFrom(const MsgGT2LNOnlines& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGT2LNOnlines::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgGT2LNOnlines::Swap(MsgGT2LNOnlines* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgGT2LNOnlines::InternalSwap(MsgGT2LNOnlines* other) {
  std::swap(onlines_, other->onlines_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgGT2LNOnlines::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGT2LNOnlines_descriptor_;
  metadata.reflection = MsgGT2LNOnlines_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgGT2LNOnlines

// required uint32 onlines = 1;
 bool MsgGT2LNOnlines::has_onlines() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgGT2LNOnlines::set_has_onlines() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgGT2LNOnlines::clear_has_onlines() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgGT2LNOnlines::clear_onlines() {
  onlines_ = 0u;
  clear_has_onlines();
}
 ::google::protobuf::uint32 MsgGT2LNOnlines::onlines() const {
  // @@protoc_insertion_point(field_get:message.MsgGT2LNOnlines.onlines)
  return onlines_;
}
 void MsgGT2LNOnlines::set_onlines(::google::protobuf::uint32 value) {
  set_has_onlines();
  onlines_ = value;
  // @@protoc_insertion_point(field_set:message.MsgGT2LNOnlines.onlines)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgGT2LNPrepar::kAccountFieldNumber;
#endif  // !_MSC_VER

MsgGT2LNPrepar::MsgGT2LNPrepar()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgGT2LNPrepar)
}

void MsgGT2LNPrepar::InitAsDefaultInstance() {
}

MsgGT2LNPrepar::MsgGT2LNPrepar(const MsgGT2LNPrepar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgGT2LNPrepar)
}

void MsgGT2LNPrepar::SharedCtor() {
  _cached_size_ = 0;
  account_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGT2LNPrepar::~MsgGT2LNPrepar() {
  // @@protoc_insertion_point(destructor:message.MsgGT2LNPrepar)
  SharedDtor();
}

void MsgGT2LNPrepar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGT2LNPrepar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGT2LNPrepar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGT2LNPrepar_descriptor_;
}

const MsgGT2LNPrepar& MsgGT2LNPrepar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  return *default_instance_;
}

MsgGT2LNPrepar* MsgGT2LNPrepar::default_instance_ = NULL;

MsgGT2LNPrepar* MsgGT2LNPrepar::New(::google::protobuf::Arena* arena) const {
  MsgGT2LNPrepar* n = new MsgGT2LNPrepar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgGT2LNPrepar::Clear() {
  account_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgGT2LNPrepar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgGT2LNPrepar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 account = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_)));
          set_has_account();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgGT2LNPrepar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgGT2LNPrepar)
  return false;
#undef DO_
}

void MsgGT2LNPrepar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgGT2LNPrepar)
  // required uint64 account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgGT2LNPrepar)
}

::google::protobuf::uint8* MsgGT2LNPrepar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgGT2LNPrepar)
  // required uint64 account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgGT2LNPrepar)
  return target;
}

int MsgGT2LNPrepar::ByteSize() const {
  int total_size = 0;

  // required uint64 account = 1;
  if (has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->account());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGT2LNPrepar::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgGT2LNPrepar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGT2LNPrepar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGT2LNPrepar::MergeFrom(const MsgGT2LNPrepar& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgGT2LNPrepar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGT2LNPrepar::CopyFrom(const MsgGT2LNPrepar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGT2LNPrepar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgGT2LNPrepar::Swap(MsgGT2LNPrepar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgGT2LNPrepar::InternalSwap(MsgGT2LNPrepar* other) {
  std::swap(account_, other->account_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgGT2LNPrepar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGT2LNPrepar_descriptor_;
  metadata.reflection = MsgGT2LNPrepar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgGT2LNPrepar

// required uint64 account = 1;
 bool MsgGT2LNPrepar::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgGT2LNPrepar::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgGT2LNPrepar::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgGT2LNPrepar::clear_account() {
  account_ = GOOGLE_ULONGLONG(0);
  clear_has_account();
}
 ::google::protobuf::uint64 MsgGT2LNPrepar::account() const {
  // @@protoc_insertion_point(field_get:message.MsgGT2LNPrepar.account)
  return account_;
}
 void MsgGT2LNPrepar::set_account(::google::protobuf::uint64 value) {
  set_has_account();
  account_ = value;
  // @@protoc_insertion_point(field_set:message.MsgGT2LNPrepar.account)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MsgGTRegisterLG::kGateInfoFieldNumber;
const int MsgGTRegisterLG::kIpFieldNumber;
const int MsgGTRegisterLG::kPortFieldNumber;
const int MsgGTRegisterLG::kAccountsFieldNumber;
#endif  // !_MSC_VER

MsgGTRegisterLG::MsgGTRegisterLG()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MsgGTRegisterLG)
}

void MsgGTRegisterLG::InitAsDefaultInstance() {
  gateinfo_ = const_cast< ::message::MsgServerRegister*>(&::message::MsgServerRegister::default_instance());
}

MsgGTRegisterLG::MsgGTRegisterLG(const MsgGTRegisterLG& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.MsgGTRegisterLG)
}

void MsgGTRegisterLG::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gateinfo_ = NULL;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGTRegisterLG::~MsgGTRegisterLG() {
  // @@protoc_insertion_point(destructor:message.MsgGTRegisterLG)
  SharedDtor();
}

void MsgGTRegisterLG::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete gateinfo_;
  }
}

void MsgGTRegisterLG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGTRegisterLG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGTRegisterLG_descriptor_;
}

const MsgGTRegisterLG& MsgGTRegisterLG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  return *default_instance_;
}

MsgGTRegisterLG* MsgGTRegisterLG::default_instance_ = NULL;

MsgGTRegisterLG* MsgGTRegisterLG::New(::google::protobuf::Arena* arena) const {
  MsgGTRegisterLG* n = new MsgGTRegisterLG;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgGTRegisterLG::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_gateinfo()) {
      if (gateinfo_ != NULL) gateinfo_->::message::MsgServerRegister::Clear();
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    port_ = 0u;
  }
  accounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgGTRegisterLG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.MsgGTRegisterLG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.MsgServerRegister GateInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gateinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.MsgGTRegisterLG.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Accounts;
        break;
      }

      // repeated .message.GTLGData Accounts = 4;
      case 4: {
        if (tag == 34) {
         parse_Accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Accounts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.MsgGTRegisterLG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.MsgGTRegisterLG)
  return false;
#undef DO_
}

void MsgGTRegisterLG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.MsgGTRegisterLG)
  // required .message.MsgServerRegister GateInfo = 1;
  if (has_gateinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->gateinfo_, output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgGTRegisterLG.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // repeated .message.GTLGData Accounts = 4;
  for (unsigned int i = 0, n = this->accounts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->accounts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.MsgGTRegisterLG)
}

::google::protobuf::uint8* MsgGTRegisterLG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MsgGTRegisterLG)
  // required .message.MsgServerRegister GateInfo = 1;
  if (has_gateinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->gateinfo_, target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.MsgGTRegisterLG.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // repeated .message.GTLGData Accounts = 4;
  for (unsigned int i = 0, n = this->accounts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->accounts(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MsgGTRegisterLG)
  return target;
}

int MsgGTRegisterLG::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_gateinfo()) {
    // required .message.MsgServerRegister GateInfo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gateinfo_);
  }

  if (has_ip()) {
    // required string ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_port()) {
    // required uint32 port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
int MsgGTRegisterLG::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .message.MsgServerRegister GateInfo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gateinfo_);

    // required string ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required uint32 port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .message.GTLGData Accounts = 4;
  total_size += 1 * this->accounts_size();
  for (int i = 0; i < this->accounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accounts(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGTRegisterLG::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgGTRegisterLG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGTRegisterLG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGTRegisterLG::MergeFrom(const MsgGTRegisterLG& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  accounts_.MergeFrom(from.accounts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateinfo()) {
      mutable_gateinfo()->::message::MsgServerRegister::MergeFrom(from.gateinfo());
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgGTRegisterLG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGTRegisterLG::CopyFrom(const MsgGTRegisterLG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGTRegisterLG::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_gateinfo()) {
    if (!this->gateinfo_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->accounts())) return false;
  return true;
}

void MsgGTRegisterLG::Swap(MsgGTRegisterLG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgGTRegisterLG::InternalSwap(MsgGTRegisterLG* other) {
  std::swap(gateinfo_, other->gateinfo_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  accounts_.UnsafeArenaSwap(&other->accounts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgGTRegisterLG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGTRegisterLG_descriptor_;
  metadata.reflection = MsgGTRegisterLG_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgGTRegisterLG

// required .message.MsgServerRegister GateInfo = 1;
 bool MsgGTRegisterLG::has_gateinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MsgGTRegisterLG::set_has_gateinfo() {
  _has_bits_[0] |= 0x00000001u;
}
 void MsgGTRegisterLG::clear_has_gateinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MsgGTRegisterLG::clear_gateinfo() {
  if (gateinfo_ != NULL) gateinfo_->::message::MsgServerRegister::Clear();
  clear_has_gateinfo();
}
 const ::message::MsgServerRegister& MsgGTRegisterLG::gateinfo() const {
  // @@protoc_insertion_point(field_get:message.MsgGTRegisterLG.GateInfo)
  return gateinfo_ != NULL ? *gateinfo_ : *default_instance_->gateinfo_;
}
 ::message::MsgServerRegister* MsgGTRegisterLG::mutable_gateinfo() {
  set_has_gateinfo();
  if (gateinfo_ == NULL) {
    gateinfo_ = new ::message::MsgServerRegister;
  }
  // @@protoc_insertion_point(field_mutable:message.MsgGTRegisterLG.GateInfo)
  return gateinfo_;
}
 ::message::MsgServerRegister* MsgGTRegisterLG::release_gateinfo() {
  clear_has_gateinfo();
  ::message::MsgServerRegister* temp = gateinfo_;
  gateinfo_ = NULL;
  return temp;
}
 void MsgGTRegisterLG::set_allocated_gateinfo(::message::MsgServerRegister* gateinfo) {
  delete gateinfo_;
  gateinfo_ = gateinfo;
  if (gateinfo) {
    set_has_gateinfo();
  } else {
    clear_has_gateinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgGTRegisterLG.GateInfo)
}

// required string ip = 2;
 bool MsgGTRegisterLG::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MsgGTRegisterLG::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
 void MsgGTRegisterLG::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MsgGTRegisterLG::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& MsgGTRegisterLG::ip() const {
  // @@protoc_insertion_point(field_get:message.MsgGTRegisterLG.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgGTRegisterLG::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.MsgGTRegisterLG.ip)
}
 void MsgGTRegisterLG::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.MsgGTRegisterLG.ip)
}
 void MsgGTRegisterLG::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.MsgGTRegisterLG.ip)
}
 ::std::string* MsgGTRegisterLG::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:message.MsgGTRegisterLG.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgGTRegisterLG::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgGTRegisterLG::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:message.MsgGTRegisterLG.ip)
}

// required uint32 port = 3;
 bool MsgGTRegisterLG::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void MsgGTRegisterLG::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
 void MsgGTRegisterLG::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
 void MsgGTRegisterLG::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::google::protobuf::uint32 MsgGTRegisterLG::port() const {
  // @@protoc_insertion_point(field_get:message.MsgGTRegisterLG.port)
  return port_;
}
 void MsgGTRegisterLG::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:message.MsgGTRegisterLG.port)
}

// repeated .message.GTLGData Accounts = 4;
 int MsgGTRegisterLG::accounts_size() const {
  return accounts_.size();
}
 void MsgGTRegisterLG::clear_accounts() {
  accounts_.Clear();
}
 const ::message::GTLGData& MsgGTRegisterLG::accounts(int index) const {
  // @@protoc_insertion_point(field_get:message.MsgGTRegisterLG.Accounts)
  return accounts_.Get(index);
}
 ::message::GTLGData* MsgGTRegisterLG::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:message.MsgGTRegisterLG.Accounts)
  return accounts_.Mutable(index);
}
 ::message::GTLGData* MsgGTRegisterLG::add_accounts() {
  // @@protoc_insertion_point(field_add:message.MsgGTRegisterLG.Accounts)
  return accounts_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::message::GTLGData >&
MsgGTRegisterLG::accounts() const {
  // @@protoc_insertion_point(field_list:message.MsgGTRegisterLG.Accounts)
  return accounts_;
}
 ::google::protobuf::RepeatedPtrField< ::message::GTLGData >*
MsgGTRegisterLG::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:message.MsgGTRegisterLG.Accounts)
  return &accounts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
